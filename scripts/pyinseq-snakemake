#!/usr/bin/env python3

"""

Entry-point for running pyinseq using snakemake

"""
import json
import os
import yaml
import argparse
import subprocess as sub
from pathlib import Path

# Pyinseq imports
import pyinseq.workflows as w


def run(configFile: str, threads: int, snake_params: list) -> None:
    """ Execute snakemake workflow """
    cmd = ['snakemake', '--configfile', configFile,
           '-s', w.get_workflow_snakefile_path('PyinseqSnakemake'), '--cores', str(threads)]
    if snake_params:
        cmd.extend(snake_params)
    sub.call(cmd)
    return

def convert_args_to_yaml(args):
    """ Converts arguments to a yaml format for snakemake """
    for arg in vars(args):
        print(arg)
    with open('config.yml', 'w') as f:
        yaml.dump(vars(args), f)
    return

# TODO: Move functions into utils or Snakemake Class

TEMPLATE = {
    'input': None,
    'samples': None,
    'genome': None,
    'experiment': None,
    'threads': None,


}

def get_default_config(format='.yaml') -> None:
    """
    Writes a default config file for pyinseq-snakemake

    :param format: file extension for configfile (json or yaml)
    :return:
    """
    dumper = {'.yaml': yaml.dump, '.json': json.dump}[format]
    with open(f'pyinseq-snake_default_config{format}', 'w') as f:
        dumper(TEMPLATE, f)
    return


def write_configfile(args, format='.yaml') -> Path:
    """

    Given pyinseq arguments, creates a config file that can be given to snakemake

    :param args: Namespace object with pyinseq args
    :param format: file extension for configfile (json or yaml)
    :return:
    """
    dumper = {'.yaml': yaml.dump, '.json': json.dump}[format]
    configfile = Path(f'{args.experiment}_pyinseq-snake_config{format}')
    with open(configfile, 'w') as f:
        config_dict = {key: vars(args)[key] for key in TEMPLATE}
        dumper(config_dict, f)
    return configfile



if __name__ == "__main__":
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(prog='pyinseq-snakemake',
                                     usage='Run pyinseq using snakemake as the pipeline manager')

    SNAKE = parser.add_argument_group('SNAKEMAKE CONFIGURATION')

    SNAKE.add_argument('--get-default-config',  action='store_true', help="")
    SNAKE.add_argument('--config-format', default='.yaml', help="Format for the configuration file. Options are: '.json' or '.yaml'")
    SNAKE.add_argument('-c', '--config', default=False)
    SNAKE.add_argument("-T", '--threads', type=int, help="Number of threads for running pyinseq", default=os.cpu_count())
    SNAKE.add_argument('--additional-params',
                       help="Additional params passed to SNAKEMAKE. Make sure they are correct cause "
                            "I will not be checking....",
                       nargs='...',
                       default=[],
                       type=str,
                       )

    DEFAULT = parser.add_argument_group('Pyinseq arguments')
    DEFAULT.add_argument(
        "-i", "--input", help="input Illumina reads file or folder", required=False
    )
    DEFAULT.add_argument(
        "-s", "--samples", help="sample list with barcodes", required=False
    )
    DEFAULT.add_argument(
        "-e",
        "--experiment",
        help="experiment name (no spaces or special characters)",
        required=False
    )
    DEFAULT.add_argument(
        "-g",
        "--genome",
        help="genome in GenBank format (one concatenated file for multiple contigs/chromosomes)",
        required=False,
    )
    DEFAULT.add_argument(
        "-d", "--disruption", help="fraction of gene disrupted (0.0 - 1.0)", default=1.0
    )
    DEFAULT.add_argument(
        "--min_count", help="Minimum number of reads per insertion site", default=3
    )
    DEFAULT.add_argument(
        "--max_ratio",
        help="Maximum ratio of left:right or right:left reads per insertion site",
        default=10,
    )
    args = parser.parse_args()

    if args.get_default_config:
        get_default_config(format=args.config_format)
        exit(0)
    # Write configuration file
    if args.config:
        config_file = args.config
    else:
        config_file = write_configfile(args, args.config_format)
        # Also run pyinseq
    try:
        run(config_file, args.threads, args.additional_params)
        exit(0)
    except Exception:
        exit(1)
    # TODO: pass to snakemake run function


    #run('PyinseqSnakemake')
    if not args:
        parser.print_help()