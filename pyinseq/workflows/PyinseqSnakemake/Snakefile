#!/usr/bin/python

"""

Snakefile for pyinseq pipeline

"""
from pathlib import Path

# Pyinseq imports
import pyinseq
from pyinseq.utils import read_gene_file
from pyinseq.demultiplex import demultiplex_fastq
from pyinseq.process_mapping import map_sites, map_genes, build_gene_table
from pyinseq.runner import Settings, build_fna_and_table_files, tab_delimited_samples_to_dict, pipeline_summarize

ENVS = Path(pyinseq.__file__).parent.joinpath("envs")

### Grab from config
reads = config['input']
samples = config['samples']
experiment = config['experiment']
reference_genome = config['genome']
output_dir = f"results/{experiment}"

# Settings object
settings = Settings(experiment)
samples_dict = tab_delimited_samples_to_dict(samples)


rule all:
    input:
        f'{output_dir}/summary_gene_table.txt',
        expand(output_dir + "/raw_data/{sample}.fastq", sample=samples_dict.keys()),
        expand(output_dir + "/{sample}_trimmed.fastq", sample=samples_dict.keys()),
        expand(output_dir + "/{sample}_bowtie.txt", sample=samples_dict.keys()),
        expand(output_dir + "/{sample}_sites.txt", sample=samples_dict.keys()),
        expand(output_dir + "/{sample}_genes.txt", sample=samples_dict.keys()),
        f"{output_dir}/samples.yml"


rule genome_prep:
    input:
        genebank=f"{reference_genome}"
    output:
        fna_file="{output_dir}/genome_lookup/genome.fna",
        ftt_file="{output_dir}/genome_lookup/genome.ftt",
    threads: config['threads']
    run:
        # Build needed genome tables
        build_fna_and_table_files(input.genebank, settings)


rule bowtie_index:
    input:
        fna_file=f"{output_dir}/genome_lookup/genome.fna",
    output:
        "{output_dir}/genome_lookup/genome.1.ebwt",
    threads: config['threads']
    conda:
        str(ENVS.joinpath("bowtie.yaml"))
    shell:
        "bowtie-build -q {input.fna_file} {output_dir}/genome_lookup/genome"


rule demultiplex:
    input:
        fastq=f"{reads}",
        genome=f"{output_dir}/genome_lookup/genome.1.ebwt"
    output:
        expand(output_dir + "/raw_data/{sample}.fastq", sample=samples_dict.keys()),
        expand(output_dir + "/{sample}_trimmed.fastq", sample=samples_dict.keys())
    threads: config['threads']
    run:
        # Run demultiplex
        demultiplex_fastq(input.fastq, samples_dict, settings)


rule bowtie_mapping:
    input:
        output_dir + "/{sample}_trimmed.fastq"
    output:
        output_dir + "/{sample}_bowtie.txt"
    threads: config['threads']
    conda:
        str(ENVS.joinpath("bowtie.yaml"))
    shell:
        "echo Mapping {wildcards.sample} reads to genome using bowtie && bowtie -m 1 --best --strata -a --fullref -n 1 -l 17 " +
         f"{output_dir}/genome_lookup/genome " + "-q {input} {output} -p 2"


rule map_sites:
    input:
        output_dir + "/{sample}_bowtie.txt"
    output:
        output_dir + "/{sample}_sites.txt",
    threads: config['threads']
    run:
        # Map sites
        map_sites(wildcards.sample, settings)


rule map_genes:
    input:
        output_dir + "/{sample}_sites.txt",
    output:
        output_dir + "/{sample}_genes.txt"
    threads: config['threads']
    run:
        # Map genes
        map_genes(wildcards.sample, settings)


rule build_gene_table:
    input:
        expand(output_dir + "/{sample}_genes.txt", sample=samples_dict.keys()),
    output:
        "{output_dir}/summary_gene_table.txt"
    threads: config['threads']
    run:
        # Get gene_mappings dictionary
        gene_mappings = dict()
        for sample_gene_table in input:
            from pathlib import Path
            sample = Path(sample_gene_table).name.replace('_genes.txt', '')
            gene_mappings[sample] = read_gene_file(sample_gene_table)
        # Map sites
        build_gene_table(settings.organism, samples_dict, gene_mappings, settings.experiment)

rule summarize:
    input:
        output_dir + "/summary_gene_table.txt"
    output:
        "{output_dir}/samples.yml"
    threads: config['threads']
    run:
        pipeline_summarize(samples_dict, settings, 'snakemake')



