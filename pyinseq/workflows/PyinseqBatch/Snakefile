#!/usr/bin/python

"""

Snakefile for running pyinseq pipeline

"""


import logging

# Pyinseq imports
from pyinseq.demultiplex import demultiplex_fastq
from pyinseq.utils import create_experiment_directories
from pyinseq.config import bowtie, bowtieBuild
from pyinseq.runner import Settings, build_fna_and_table_files, tab_delimited_samples_to_dict, pipeline_mapping


# FOR NOW: SETUP SETTINGS AND SAMPLES_DICT
# TODO: Remove test data
from pathlib import Path
from snakemake.logging import logger, format_resources, format_resource_names
import snakemake

test_data = Path('../../tests/data/input')
test_fastq_file = test_data.joinpath('example01.fastq')
test_samples = test_data.joinpath('example01.txt')
# Get samples dict
samples_dict = tab_delimited_samples_to_dict(test_samples)
genome_path = test_data.joinpath('ES114v2.gb')

#### START HERE ####
# Maybe define settings class in driver?
experiment = "TESTING-SNAKEMAKE"
settings = Settings(experiment)
# Default output
output_dir = f"results/{experiment}"

rule all:
    input:
        f'{output_dir}/summary_gene_table.txt'


rule genome_prep:
    input:
        genebank=f"{str(genome_path)}"
    output:
        fna_file="{output_dir}/genome_lookup/genome.fna",
        ftt_file="{output_dir}/genome_lookup/genome.ftt",
    run:
        # Build needed genome tables
        build_fna_and_table_files(input.genebank, settings)


rule bowtie_index:
    input:
        fna_file=f"{output_dir}/genome_lookup/genome.fna",
    output:
        "{output_dir}/genome_lookup/genome.1.ebwt",
    shell:
        "{bowtieBuild} -q {input.fna_file} {output_dir}/genome_lookup/genome"


rule demultiplex:
    input:
        fastq=f"{test_fastq_file}",
        genome="{output_dir}/genome_lookup/genome.1.ebwt"
    output:
        '{output_dir}/raw_data/E001_01.fastq',
        '{output_dir}/E001_01_trimmed.fastq'
    run:
        # Run demultiplex
        demultiplex_fastq(input.fastq, samples_dict, settings)


rule bowtie_mapping_and_processing:
    input:
        f'{output_dir}/E001_01_trimmed.fastq',
    output:
        "{output_dir}/summary_gene_table.txt"
    run:
        pipeline_mapping(settings, samples_dict)
